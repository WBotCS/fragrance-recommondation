# -*- coding: utf-8 -*-
"""ML(fragrance).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nvajO-LNvTZHWDIXkIme7k4mJF06hnI
"""

import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer, LabelEncoder
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import joblib

# 1. Data Loading and Preprocessing
df = pd.read_csv("modified_fra_cleaned.csv", delimiter=";")
df.columns = ['Fragrance Name', 'Brand', 'Gender', 'Top Notes', 'Middle Notes', 'Base Notes', 'Scent Family']

for col in ['Brand', 'Top Notes', 'Middle Notes', 'Base Notes', 'Scent Family']:
    df[col] = df[col].str.lower()

for col in ['Top Notes', 'Middle Notes', 'Base Notes', 'Scent Family']:
    df[col] = df[col].str.split(',')

df['All Notes'] = df['Top Notes'] + df['Middle Notes'] + df['Base Notes']

# One-hot encode All Notes
mlb = MultiLabelBinarizer()
all_notes_encoded = pd.DataFrame(mlb.fit_transform(df['All Notes']), columns=["note_" + c for c in mlb.classes_], index=df.index)
df = df.join(all_notes_encoded)

# One-hot encode Scent Family
scent_family_encoded = pd.DataFrame(mlb.fit_transform(df['Scent Family']), columns=["family_" + c for c in mlb.classes_], index=df.index)
df = df.join(scent_family_encoded)

label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])

df = df.drop(['Top Notes', 'Middle Notes', 'Base Notes', 'All Notes', 'Scent Family'], axis=1)

# 2. Create Feature Matrix
feature_columns = [col for col in df.columns if col not in ['Fragrance Name', 'Brand']]
fragrance_features = df[feature_columns]

# 3. Calculate Similarity Matrix
similarity_matrix = cosine_similarity(fragrance_features)

# 4. Create Recommendation Function (with disliked notes handling)
def get_recommendations(user_preferences, disliked_notes_indices, df, similarity_matrix, top_n=5):
    user_similarity = cosine_similarity(user_preferences.reshape(1, -1), fragrance_features)
    sorted_indices = np.argsort(user_similarity[0])[::-1]
    filtered_indices = []
    for index in sorted_indices:
        fragrance_vector = fragrance_features.iloc[index].values
        if not any(fragrance_vector[note_index] == 1 for note_index in disliked_notes_indices):
            filtered_indices.append(index)
        if len(filtered_indices) == top_n:
            break
    recommendations = df.iloc[filtered_indices][['Fragrance Name', 'Brand']]
    return



"""### Testing the Model"""

# 5. Test Your Model
user_preferences = np.random.rand(len(feature_columns))
# Find indices for "vanilla" and "woody" with the "note_" prefix
vanilla_index = feature_columns.index('note_vanilla')
woody_index = feature_columns.index('family_woody')
user_preferences[vanilla_index] = 1
user_preferences[woody_index] = 1

disliked_notes = []
disliked_notes_indices = [feature_columns.index(note) for note in disliked_notes if note in feature_columns]

recommendations = get_recommendations(user_preferences, disliked_notes_indices, df, similarity_matrix, top_n=5)
print(recommendations)

# 1. Manually Specify User Preferences Based on "Le Male Le Parfum" Properties
user_preferences = np.zeros(len(feature_columns))

# Based on the properties: le-male-le-parfum;jean-paul-gaultier;men;cardamom;lavender, iris;vanilla, oriental notes, woodsy notes;warm spicy, vanilla, lavender, aromatic, powdery
# Set preferences for notes and scent families present in "Le Male Le Parfum"
# (Make sure these features exist in your 'feature_columns')
preferred_notes = ["cardamom", "lavender", "iris", "vanilla", "oriental notes", "woodsy notes"]
preferred_families = ["warm spicy", "vanilla", "lavender", "aromatic", "powdery"]

for note in preferred_notes:
    if "note_" + note in feature_columns:
        note_index = feature_columns.index("note_" + note)
        user_preferences[note_index] = 1

for family in preferred_families:
    if "family_" + family in feature_columns:
        family_index = feature_columns.index("family_" + family)
        user_preferences[family_index] = 1

# 2. Set Disliked Notes (Optional)
disliked_notes = ["note_oud", "note_patchouli"]  # Example: Dislike oud and patchouli
disliked_notes_indices = [feature_columns.index(note) for note in disliked_notes if note in feature_columns]

# 3. Call get_recommendations
recommendations = get_recommendations(user_preferences, disliked_notes_indices, df, similarity_matrix, top_n=5)

# 4. Print Recommendations
print(recommendations)

"""### Heat Map (most likely going to crash, overwhelming)"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 8))  # Adjust size as needed
sns.heatmap(similarity_matrix, annot=False, cmap="YlGnBu")  # annot=True to show values (can be overwhelming)
plt.title("Fragrance Similarity Matrix")
plt.xlabel("Fragrance Index")
plt.ylabel("Fragrance Index")
plt.show()

"""### Saving Model"""

# 6. Save Model Data
joblib.dump(similarity_matrix, "similarity_matrix.joblib")
joblib.dump(feature_columns, "feature_columns.joblib")
joblib.dump(df, "fragrance_data.joblib")
joblib.dump(label_encoder, "label_encoder.joblib")